{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIlS, USER_LOGOUT, USER_SIGNUP_REQUEST, USER_SIGNUP_SUCCESS, USER_SIGNUP_FAIlS, USER_PROFILE_REQUEST, USER_PROFILE_SUCCESS, USER_PROFILE_FAIlS, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIlS, USER_PROFILE_RESET } from \"../Constants/userConstant\";\nimport axios from \"axios\";\nimport { ORDER_LIST_MY_RESET } from \"../Constants/orderConstant\";\nexport const userLogin = (email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST\n      });\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await axios.post(\"http://localhost:5000/api/users/login\", {\n        email,\n        password\n      }, config);\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n\n      if (!userData.message) {\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: userData\n        });\n        localStorage.setItem(\"userInfo\", JSON.stringify(getState().userLogin.userInfo));\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIlS,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      }); // console.log(getState().userLogin)\n    }\n  };\n};\nexport const userLogout = () => {\n  return async (dispatch, getState) => {\n    localStorage.removeItem(\"userInfo\");\n    dispatch({\n      type: USER_LOGOUT\n    });\n    dispatch({\n      type: ORDER_LIST_MY_RESET\n    });\n    dispatch({\n      type: USER_PROFILE_RESET\n    });\n  };\n};\nexport const userSignup = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_SIGNUP_REQUEST\n      });\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await axios.post(\"http://localhost:5000/api/users/signup\", {\n        name,\n        email,\n        password\n      }, config);\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n\n      if (!userData.message) {\n        dispatch({\n          type: USER_SIGNUP_SUCCESS,\n          payload: userData\n        });\n        dispatch({\n          type: \"remove\"\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_SIGNUP_FAIlS,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const userProfile = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_PROFILE_REQUEST\n      });\n      const token = getState().userLogin.userInfo.token; // console.log(token)\n\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`\n        }\n      };\n      const res = await axios.get(`http://localhost:5000/api/users/profile`, config);\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n\n      if (!userData.message) {\n        dispatch({\n          type: USER_PROFILE_SUCCESS,\n          payload: userData\n        });\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: userData\n        });\n        localStorage.setItem(\"userInfo\", JSON.stringify(getState().userLogin.userInfo));\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_PROFILE_FAIlS,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};\nexport const userUpdateProfile = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_UPDATE_REQUEST\n      });\n      const token = getState().userLogin.userInfo.token; // console.log(token)\n\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`\n        }\n      };\n      const res = await axios.put(`http://localhost:5000/api/users/profile`, {\n        name,\n        email,\n        password\n      }, config);\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n\n      if (!userData.message) {\n        dispatch({\n          type: USER_UPDATE_SUCCESS,\n          payload: userData\n        }); // dispatch({\n        //   type: USER_LOGIN_SUCCESS,\n        //   payload: userData,\n        // });\n\n        localStorage.setItem(\"userInfo\", JSON.stringify(getState().userLogin.userInfo));\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIlS,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Dell/Downloads/Ecommerce-app-main/Ecommerce-app-main/frontend/src/redux/Actions/userAction.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIlS","USER_LOGOUT","USER_SIGNUP_REQUEST","USER_SIGNUP_SUCCESS","USER_SIGNUP_FAIlS","USER_PROFILE_REQUEST","USER_PROFILE_SUCCESS","USER_PROFILE_FAIlS","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIlS","USER_PROFILE_RESET","axios","ORDER_LIST_MY_RESET","userLogin","email","password","dispatch","getState","type","config","headers","res","post","userData","data","message","Error","payload","localStorage","setItem","JSON","stringify","userInfo","error","response","userLogout","removeItem","userSignup","name","userProfile","token","authorization","get","userUpdateProfile","put"],"mappings":"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","sourcesContent":["import {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIlS,\n  USER_LOGOUT,\n  USER_SIGNUP_REQUEST,\n  USER_SIGNUP_SUCCESS,\n  USER_SIGNUP_FAIlS,\n  USER_PROFILE_REQUEST,\n  USER_PROFILE_SUCCESS,\n  USER_PROFILE_FAIlS,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIlS,\n  USER_PROFILE_RESET,\n} from \"../Constants/userConstant\";\nimport axios from \"axios\";\nimport { ORDER_LIST_MY_RESET } from \"../Constants/orderConstant\";\n\nexport const userLogin = (email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST,\n      });\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n      const res = await axios.post(\n        \"http://localhost:5000/api/users/login\",\n        { email, password },\n        config\n      );\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n      if (!userData.message) {\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: userData,\n        });\n        localStorage.setItem(\n          \"userInfo\",\n          JSON.stringify(getState().userLogin.userInfo)\n        );\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIlS,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n      // console.log(getState().userLogin)\n    }\n  };\n};\n\nexport const userLogout = () => {\n  return async (dispatch, getState) => {\n    localStorage.removeItem(\"userInfo\");\n    dispatch({\n      type: USER_LOGOUT,\n    });\n    dispatch({ type: ORDER_LIST_MY_RESET });\n    dispatch({ type: USER_PROFILE_RESET });\n  };\n};\nexport const userSignup = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_SIGNUP_REQUEST,\n      });\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n      const res = await axios.post(\n        \"http://localhost:5000/api/users/signup\",\n        { name, email, password },\n        config\n      );\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n      if (!userData.message) {\n        dispatch({\n          type: USER_SIGNUP_SUCCESS,\n          payload: userData,\n        });\n        dispatch({\n          type: \"remove\",\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_SIGNUP_FAIlS,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n};\n\nexport const userProfile = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_PROFILE_REQUEST,\n      });\n      const token = getState().userLogin.userInfo.token;\n      // console.log(token)\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`,\n        },\n      };\n      const res = await axios.get(\n        `http://localhost:5000/api/users/profile`,\n        config\n      );\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n      if (!userData.message) {\n        dispatch({\n          type: USER_PROFILE_SUCCESS,\n          payload: userData,\n        });\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: userData,\n        });\n        localStorage.setItem(\n          \"userInfo\",\n          JSON.stringify(getState().userLogin.userInfo)\n        );\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_PROFILE_FAIlS,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n};\n\nexport const userUpdateProfile = (name, email, password) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_UPDATE_REQUEST,\n      });\n      const token = getState().userLogin.userInfo.token;\n      // console.log(token)\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`,\n        },\n      };\n      const res = await axios.put(\n        `http://localhost:5000/api/users/profile`,\n        { name, email, password },\n        config\n      );\n      const userData = res.data;\n\n      if (userData.message) {\n        // console.log(\"condition working\")\n        throw new Error(userData.message);\n      }\n      if (!userData.message) {\n        dispatch({\n          type: USER_UPDATE_SUCCESS,\n          payload: userData,\n        });\n        // dispatch({\n        //   type: USER_LOGIN_SUCCESS,\n        //   payload: userData,\n        // });\n        localStorage.setItem(\n          \"userInfo\",\n          JSON.stringify(getState().userLogin.userInfo)\n        );\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_UPDATE_FAIlS,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}